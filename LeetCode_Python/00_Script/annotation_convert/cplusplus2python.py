"""
@brief: convert C++ docstring to Python version, first version generated by chat
@date: 27/8/2025
"""

import re

def cpp_comment_to_python_docstring(cpp_comment: str) -> str:
    # 1. 去掉开头和结尾的 /** */
    cpp_comment = cpp_comment.strip()
    cpp_comment = re.sub(r'^/\*\*', '', cpp_comment)
    cpp_comment = re.sub(r'\*/$', '', cpp_comment)

    # 2. 去掉每行开头的 *
    lines = cpp_comment.split('\n')
    cleaned_lines = []
    for line in lines:
        line = re.sub(r'^\s*\* ?', '', line)
        cleaned_lines.append(line)

    # 3. 替换 C++ 风格的标签
    replacements = {
        '@brief:': '@brief:',
        '@link:': '@link:',
        '@author:': '@author:',
        '@date:': '@date:',
        '@Difficulty:': '@Difficulty:',
        '@Label:': '@Label:',
        '@Retrospect': '@Retrospect',
        '@thoughts:': '@thoughts:',
    }

    result_lines = []
    for line in cleaned_lines:
        for k, v in replacements.items():
            if line.startswith(k):
                line = line.replace(k, v)
        result_lines.append(line)

    # 4. 拼成 Python 风格文档字符串
    python_docstring = '"""\n' + '\n'.join(result_lines).strip() + '\n"""'
    return python_docstring


# ==== 测试 ====
cpp_comment = """
/**
 * @brief: Leetcode_18_四数之和
 * @link: https://leetcode.cn/problems/4sum/description/
 * @author: liangj.zhang
 * @date: 27/8/2025
 * 
 * @Difficulty: Medium
 * 
 * @Label: Two Pointers(Facing)
 * 
 * @Retrospect(worthy 1 - 5): 2
 * 
 * @thoughts:
 *      + 【思路 1】排序 + 相向双指针 + 优化剪枝
 *          思路跟三数之和还是一样的，只是外面多套了一层枚举，时间复杂度是 O(n^3)
 *          + 分析：
 *              + 时间复杂度：排序O(nlogn) + 嵌套的相向双指针 O(n^3) ==> O(n^3)
 *              + 空间复杂度：没有申请额外的空间 O(1)
 *          + rank:
 *              + 时间效率：0 ms, 击败 100%
 *              + 空间效率：17.09 MB, 击败 60.48%
 *
 *      + 【思路 1.2】以递归的方式实现（也是多数之和的模板了）
 *          本质上，还是上面的思路，做法是以递归的方式实现，5、6数之和，也能按照这个模板来；
 *          这是别人写的，有更优化的小点，在前 k 个数之和 > target 的情况：
 *              最前面的 k 个数 > target => 直接 break
 *              最后面的 k - 1 数 + 枚举确定的数 < target，枚举还能往后改变情况
 *              但是前 k 个数 > target 情况改变不了
 *          + 分析：
 *              + 时间复杂度：排序O(nlogn) + 嵌套的相向双指针 O(n^3) ==> O(n^3)
 *              + 空间复杂度：至少递归 n - k - 1 次 ==> O(n)
 *          + rank:
 *              + 时间效率：3 ms, 击败 90.18%
 *              + 空间效率：17.68 MB, 击败 5.28%
 */
"""

print(cpp_comment_to_python_docstring(cpp_comment))

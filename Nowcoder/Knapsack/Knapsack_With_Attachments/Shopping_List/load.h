/**
 * @brief: 分组依赖背包 -- 动态规划 -- porting on 8/6/2025
 *
 * @URL: https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4
 *
 *
首先，我是参考了 chat 给的答案，来理解 分组背包 算法；之前不理解；

写了一个基本的答案：

1. 因为最多就 60 个物品，且是按 index 来对应主件和附件；
2. 封装一个 Goods 类，记录 value, weight 和 position
3. 根据输入完成记录 Goods 数据：
    1. 单独记录主件一个数组；
    2. 再起一个数组，记录附件，放在主件对应的下标下；
    
    ---
    
    这样讨论情况时，能快速取出，分得清；
    
4. 遍历主件，得到每种情况；
    1. 比如，主件，带有两个附件
    2. 那么，购买的选择有 4 种：
        1. 主件
        2. 主件 + 附件1
        3. 主件 + 附件2
        4. 主件 + 附件1 + 附件2
5. 遍历一次，得到一个主件的所有情况；
6. 每种情况，被纳入比较，就相当于以能有的预算下，购买它，跟已记录的幸福度比较；
7. 离 dp 数组末尾越远，预算花的越少的时候的，幸福度记录；
    
    离 dp 数组末尾越近，预算花的越多的时候的，幸福度记录
    

---

提交后，看到有人更快，

发现，是注意到题目的一个条件，value 一定是 10 的倍数；

排名靠前的大家，都是缩短了 dp 数组的长度（MAXDP / 10），

既减少了空间，又减少了遍历长度，提高时间效率；
*/
